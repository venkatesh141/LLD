low level design

   Solid principles
   S - single responsibility principle
   O - open closed principle
   L - liskov substitution principle
   I - interface segeregation principle
   D - depending inversion principle
   
   
   ------------------trust the process
     
   Single responsibility principle
   
   
   Each class and module in a program should focus on a single task.
   
   for example if it is add function it should do only add it should not do more than that.
   
// Not following SRP
class UserService {
    void addUser(String user) {
        System.out.println("User added: " + user);
    }
    
    void saveToDatabase(String user) {
        System.out.println("User saved to database: " + user);
    }
}

// Following SRP
class UserService {
    void addUser(String user) {
        System.out.println("User added: " + user);
    }
}

class DatabaseService {
    void saveToDatabase(String user) {
        System.out.println("User saved to database: " + user);
    }
}


   
   ------------------trust the process
 
   Open closed principle(have to use interface )
   
      If we need to create a new  feature, we should not modify the existing code, we have to create seperate module or class to create a new feature.
Definition: A class should be open for extension but closed for modification.
      
// Not following OCP
class NotificationService {
    void sendNotification(String type, String message) {
        if (type.equals("Email")) {
            System.out.println("Email sent: " + message);
        } else if (type.equals("SMS")) {
            System.out.println("SMS sent: " + message);
        }
    }
}

// Following OCP
interface Notification {
    void send(String message);
}

class EmailNotification implements Notification {
    public void send(String message) {
        System.out.println("Email sent: " + message);
    }
}

class SMSNotification implements Notification {
    public void send(String message) {
        System.out.println("SMS sent: " + message);
    }
}

class NotificationService {
    void sendNotification(Notification notification, String message) {
        notification.send(message);
    }
}
 
   ------------------trust the process
   Liskov substitution princile

   It states that objectss of a superclass should be replaceable with objects
   of its subclass without affecting correctness of program

// Not following LSP
class Bird {
    void fly() {
        System.out.println("Flying...");
    }
}

class Penguin extends Bird {
    @Override
    void fly() {
        throw new UnsupportedOperationException("Penguins can't fly");
    }
}

// Following LSP
abstract class Bird {
    abstract void move();
}

class Sparrow extends Bird {
    void move() {
        System.out.println("Flying...");
    }
}

class Penguin extends Bird {
    void move() {
        System.out.println("Swimming...");
    }
}

   
    ------------------trust the process
    
    Interface segregation priciple

 oru interface la adhuku thevaya abstract methods matum dhaan irukanum unwanted methods iruka koodathu
Definition: A class should not be forced to implement interfaces it doesn't use.

// Not following ISP
interface Animal {
    void fly();
    void swim();
    void walk();
}

class Dog implements Animal {
    public void fly() {
        // Not applicable
    }

    public void swim() {
        System.out.println("Dog swims");
    }

    public void walk() {
        System.out.println("Dog walks");
    }
}

// Following ISP
interface Walkable {
    void walk();
}

interface Swimmable {
    void swim();
}

class Dog implements Walkable, Swimmable {
    public void walk() {
        System.out.println("Dog walks");
    }

    public void swim() {
        System.out.println("Dog swims");
    }
}

--------------------------------------------trust the process

Dependency inversio principle

       Definition: High-level modules should not depend on low-level modules; both should depend on abstractions.
// Not following DIP
class Keyboard {
    void type() {
        System.out.println("Typing...");
    }
}

class Computer {
    private Keyboard keyboard = new Keyboard();
    void start() {
        keyboard.type();
    }
}

// Following DIP
interface InputDevice {
    void type();
}

class Keyboard implements InputDevice {
    public void type() {
        System.out.println("Typing...");
    }
}

class Computer {
    private InputDevice inputDevice;
    
    Computer(InputDevice inputDevice) {
        this.inputDevice = inputDevice;
    }
    
    void start() {
        inputDevice.type();
    }
}

---------------------------------------------------trust the process
The Singleton Pattern ensures that a class has only one instance and provides a global point of access to that instance. 
This is useful when exactly one object is needed to coordinate actions across the system, such as a configuration manager or a logging utility.

How It Works
Private Constructor: To prevent creating multiple instances from outside the class.
Static Instance: A static variable holds the single instance of the class.
Public Getter Method: A public static method provides access to the single instance.

// Singleton class
class Singleton {
    // Step 1: Create a static variable to hold the single instance
    private static Singleton instance;

    // Step 2: Make the constructor private to prevent direct instantiation
    private Singleton() {
        System.out.println("Singleton instance created");
    }

    // Step 3: Provide a public static method to get the single instance
    public static Singleton getInstance() {
        if (instance == null) { // Create the instance if it doesn't exist
            instance = new Singleton();
        }
        return instance; // Return the single instance
    }

    // Example method to show functionality
    public void showMessage() {
        System.out.println("Hello from Singleton!");
    }
}

// Main class to test Singleton
public class Main {
    public static void main(String[] args) {
        // Get the single instance of Singleton
        Singleton singleton1 = Singleton.getInstance();
        Singleton singleton2 = Singleton.getInstance();

        // Call a method on the Singleton instance
        singleton1.showMessage();

        // Verify that both references point to the same instance
        System.out.println(singleton1 == singleton2); // Output: true
    }
}

Key Points:
One Instance: The getInstance() method ensures only one instance is created.
Thread Safety (Optional for real-world use): For multi-threaded programs, synchronize the getInstance() method to avoid multiple threads creating separate instances.
Let me know if you'd like to see the thread-safe version or need further simplification!

. Database Connection Pool
Why Singleton? Managing connections to a database is resource-intensive.
 A Singleton ensures a single connection pool object is shared across the application.
Example Use Case: A single pool manages connections to a MySQL database in an e-commerce website.


------------------------------------------------------------trust the process



   
   
        
      
      
