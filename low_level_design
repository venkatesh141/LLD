low level design

   Solid principles
   S - single responsibility principle
   O - open closed principle
   L - liskov substitution principle
   I - interface segeregation principle
   D - depending inversion principle
   
   
   ------------------trust the process
     
   Single responsibility principle
   
   
   Each class and module in a program should focus on a single task.
   
   for example if it is add function it should do only add it should not do more than that.
   
public class Report
{
    private String content;
    public Report(String content)
    {
        this.content=content;
    }
    public void getContent()
    {
        return this.content;
    }
}
public class Reportgenerator
{
    public void generateReport()
    {
        
    }
}
public class SaveReport
{
    public void savereport()
    {
        
    }
}
public class Sendemail
{
    public void sendemail
    {
        
    }
}


   
   ------------------trust the process
 
   Open closed principle(have to use interface )
   
      If we need to create a new  feature, we should not modify the existing code, we have to create seperate module or class to create a new feature.
      
      // Interface representing a shape
public interface Shape {
  // implement it for each shape
  double calculateArea();
}

// Rectangle implementation
public class Rectangle implements Shape {
  private double width;
  private double height;

  public Rectangle(double width, double height) {
    this.width = width;
    this.height = height;
  }

  @Override
  public double calculateArea() {
    return width * height;
  }
}

// Circle implementation
public class Circle implements Shape {
  private double radius;

  public Circle(double radius) {
    this.radius = radius;
  }

  @Override
  public double calculateArea() {
    return Math.PI * radius * radius;
  }
}
public class Main
{
   public static void main(String[] args)
   {
   
    Triangle t=new Triangle(1.1,2.1);
    Circle c=new Circle(1.3);
    t.calculateArea();
    s.calculateArea();
    }
}
 
   ------------------trust the process
   Liskov substitution princile
   
   It states that objectss of a superclass should be replaceable with objects
   of its subclass without affecting correctness of program


    interface Bird
{
    void fly();
}
class Bird1 implements Bird
{
    
    public void fly()
    {
        System.out.println("bird1 can fly");
    }
}
class Bird2 implements Bird
{
    
    public void fly()
    {
        System.out.println("bird2 can't fly");
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Bird b1=new Bird1();
        Bird b2=new Bird2();
        b1.fly();
        b2.fly();
    }
}
   
   
    ------------------trust the process
    
    Interface segregation priciple

 oru interface la adhuku thevaya abstract methods matum dhaan irukanum unwanted methods iruka koodathu


Before Applying ISP

public interface Worker {
  void work();
  void eat();
}


After applying ISP

interface Workable
{
    void work();
}
interface Eatable
{
    void eat();
}
class Robo implements Workable
{
    public void work()
    {
        System.out.println("robo working");
    }
}
class Human implements Workable,Eatable
{
    public void work()
    {
        System.out.println("human working");
    }
    public void eat()
    {
        System.out.println("human eating");
    }
}
--------------------------------------------trust the process



   
   
        
      
      
